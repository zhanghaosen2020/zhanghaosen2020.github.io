# 字符串格式化
name = "张三"
message ="李四讨厌%s" % name   # name代替了%s这个框框的内容，%s 中%表示：我要占位
                            # s表示：将变量变成字符串放入展位的地方
print(message)
# 上边不支持的数字类型在这里得到支持 例如
class_num = 57
name = "张三"
avg_salary = 10000
message = "Python大数据学科，%s北京，%s期，毕业平均工资:%s" %(name,class_num,avg_salary)
print(message)

# 通过占位来完成拼接
name = "黑马程序员"
message = "学IT来：%s"%name
print(message)

# 上边的是将数字类型的变量转化为字符串类型的后占位的
# 类似于%s 可以用%d（将内容转化为整数，放入占位位置），用%f（将内容转化为浮点型，放入占位位置）
name = "传智播客"
set_up_year = 2006
stock_price = 19.99
message = "我是：%s我成立于：%d，我今天的股价是：%f"%(name,set_up_year,stock_price)
print(message)


# 字符串精度控制，上边的股价浮点型输出为19.990000，怎么解决这个问题
# 我们可以用辅助符号"m.n"来控制数据的宽度和精度
# m,控制宽度，要求是数字（很少使用），当设置的宽度小于数字自身，便不生效
# .n,控制小数点精度，要求是数字，会进行小数的四舍五入
# %5d：表示将整数的宽度控制在5位，如数字11，被设置成5d，就会变成：[空格][空格][空格]11，用三个空格补足宽度
# %5.2f：表示将宽度设置成5，将小数精度设置为2
# 小数点和小数部分也算入宽度计算，如，对11.235设置%7.2f后，结果是：[][]11.3,空格补足精度，小数部分限定为2位精度时，四舍五入为.35
# %.2f:不限制宽度，限制精度

num1 = 11
num2 = 11.345
print("数字11限制宽度为5，结果是：%5d" %num1)
print("数字11限制宽度为1，结果是：%1d" %num1)
print("数字11.345宽度限制为7，小数精度2，结果是：%7.2f" %num2)
print("数字11.345宽度不限制，小数精度2，结果是：%.2f" %num2)
