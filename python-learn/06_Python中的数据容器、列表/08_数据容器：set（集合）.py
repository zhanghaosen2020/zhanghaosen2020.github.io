"""
set(集合)
1、掌握集合的定义格式
2、掌握集合的特点
3、掌握集合的常见操作
问：我们为什么需要集合
答：通过特性来分析：列表可以修改，支持重复元素且有序；元组字符串不可修改支持重复元素且有序。
    这样就会产生一些局限性，局限在于他们都支持重复元素， 而场景需要对内容做
    去重处理，列表，元组字符串就不方便了。
    而集合最主要的特点就是支持内容元素不重复，相当于自带去重处功能并且内部是无序的
    集合使用{}定义

"""
# 基础语法，定义集合
my_set = {"传智教育","黑马程序员","itheima","传智教育","黑马程序员","itheima","传智教育","黑马程序员","itheima"}
my_set_empty = set()   # 定义空集合
print(f"my_set的内容是：{my_set}，类型是：{type(my_set)}")
print(f"my_set的内容是：{my_set_empty}，类型是：{type(my_set_empty)}")

"""
集合的常用操作——修改
首先，因为集合是无序的，所以集合不支持：下标索引访问
但是集合和列表一样是允许修改的，所以我们来看看集合的修改方法。   
"""
# 添加新元素 add方法
my_set.add("python")
my_set.add("传智教育") # 自动去重了
print(f"my_set添加元素后的结果是：{my_set}")

# 移除元素 remove方法
my_set = {"传智教育","黑马程序员","itheima","传智教育","黑马程序员","itheima","传智教育","黑马程序员","itheima"}
my_set.remove("黑马程序员")
print(f"my_set移除黑马程序员后，结果是：{my_set}")

# 随机从集合中取出一个元素 pop方法（注意，列表中的pop方法支持下标索引）
my_set = {"传智教育","黑马程序员","itheima"}
element = my_set.pop() #这句语法的结果是，随机取出，原来的集合中的被取出元素被移除变为新的
print(f"集合被取出的元素的是：{element}，取出后：{my_set}")

# 清空集合
my_set.clear()
print(f"集合被清空了，结果是：{my_set}")

"""
取出2个集合的差集
语法：集合1.different(集合2)   功能：取出集合1有而集合2没有的
结果：得到一个新的集合，集合1和集合2不变
"""
set1 = {1,2,3}
set2 = {1,5,6}
set3 = set1.difference(set2)
print(f"{set1}")
print(f"{set2}")
print(f"取出差集后的结果是：{set3}")

"""
消除2个集合的差集
语法：集合1.difference_update(集合2)
功能：对比集合1和集合2，在集合1内，删除和集合2相同的元素
结果：集合1被修改，集合2不变
"""
set1 = {1,2,3}
set2 = {1,5,6}
set1.difference_update(set2)
print(f"消除差集后，集合1结果：{set1}")
print(f"消除差集后，集合2结果：{set2}")

"""
2个集合合并
语法：集合1.union(集合2)
功能：将集合1和集合2合并，得到新的集合原来即集合1，2不变
"""
set1 = {1,2,3}
set2 = {1,5,6}
set3 = set1.union(set2)
print(f"集合合并后的集合：{set3}")

# 统计集合元素数量len()
set1 = {1,2,3,4,5}
num = len(set1)
print(f"集合类的元素数量有：{num}个")

# 集合的遍历，因为集合不支持下标索引，所以不能用下标索引来遍历
set = {1,2,3,4,5}
for element in set:
    print(f"集合的元素有：{element}")

"""
集合的特点如下：
1、可以容纳多个数据
2、可以容纳不同类型的数据（混装）
3、数据是无序存储的，不支持下标索引。
4、不允许重复数据存在，可以修改（删除或增加元素等），支持for循环。   
"""
